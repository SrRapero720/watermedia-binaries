import groovy.json.JsonOutput

plugins {
    id 'java'
    id 'idea'
}

base {
    archivesName = modid
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

/* CONFIGURATION TO SHADOW DEPENDENCIES - */
configurations {
    library
    implementation.extendsFrom library
}

println "Gradle Java: ${JavaVersion.current()}"
println "Mod ID: ${modid}"
repositories {
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://repo.spongepowered.org/maven' }
}

dependencies {
    compileOnly 'org.apache.logging.log4j:log4j-api:2.15.0'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.17.1'

    // TRULLY DEPENDENCY
    compileOnly project(':')

    // MOCKERS
    compileOnly project(':lib-neoforge')
    compileOnly project(':lib-forge')
    compileOnly("net.fabricmc:fabric-loader:${fabricV}") { // FABRIC LOADER SUPPORT
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

// Process target resources with mod info
processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', 'fabric.mod.json', "mcmod.info", "watermedia/version.cfg"]) {
        def combinedMap = [:]
        combinedMap.putAll(rootProject.properties)
        combinedMap.putAll([
                modauthorlist: JsonOutput.toJson(modauthor.trim().replaceAll(" ", "").split(","))
        ])

        expand(combinedMap)
    }
    outputs.upToDateWhen { false }
}

// DO NOT RUN
jar {
    manifest {
        attributes([
                "Specification-Title"       : modname,
                "Specification-Vendor"      : modauthor,
                "Specification-Version"     : modversion,
                "Implementation-Title"      : modname,
                "Implementation-Version"    : modversion,
                "Implementation-Vendor"     : modauthor,
                "Implementation-Timestamp"  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from(configurations.library.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF', 'META-INF/**'
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}